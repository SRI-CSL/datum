datum = line_prefix firstline newline lines

<firstline> = cfirstline | sfirstline
cfirstline = subject spaces assay spaces <'is'> spaces change spaces ctreatment

<ctreatment> = &'irt' changetype spaces treatments (spaces? stimes)? |
               &'by' changetype spaces treatments |
               &'itpo' changetype spaces treatments |
               &'itao' changetype spaces ktreatment

changetype = symbol
change = 'increased' | 'decreased' | ('detectable-but' spaces)? 'unchanged'
<stimes> = <'('> (stpt | excuse | <'times'>) <')'>
stpt = time spaces unit
time = num
excuse = 'tnr'

sfirstline = subject spaces assay spaces <'is'> spaces schange
schange = 'undetectable' | 'detectable'

<lines> = datumline (spaces? newline datumline)*
<datumline> = <'  '> line_prefix
              (source | environment | times | extra |
               comment | oligo | ipfrom) spaces?

(*
  A subject can be one of the following:
    - No subject at all
    - An oprotein with origin r/p/s
    - A protein with any other origin, plus a handle and IP
    - A chemical with a handle
    - A gene

The reason b/r/p/s oproteins are handled separately is to disambiguate
chemicals from oproteins at the grammar level, so we don't have to do
complex transformations when type checking later on.
*)
subject = <'NS'> /
          subject_sym handle? /
          oprotein handle? ip

subject_sym = symbol

ip = 'IP'?
handle = <'['> symbol <']'>

(*
  An oprotein may have:
  - An origin (a single lower case letter prefix)
  - Any number of mutations in parentheses, plus a mutation string
  - Any number of modifications in curly braces
*)
oprotein = origin protein mutations modifications

origin = #'[xbrpks]?'
protein = symbol

mutations = (<'('> mutation (<'/'> mutation)* <')'> mutation_string?)?
<mutation> = range / del_mut / s_mut / point / symbol_mut
(* Range *)
range = nat <'-'> nat
(* Deletion *)
del_mut = <'del('> range <')'>
(* Synthetic mutation *)
s_mut = <'p'> s_mut_acid s_mut_position
s_mut_acid = #'[TSY]'
s_mut_position = #'\d{1,4}'
(* Point mutation *)
point = letter nat letter
symbol_mut = symbol
mutation_string = string

modifications = modification*
modification = <'{'> mod_symbol sites? <'}'>
mod_symbol = symbol
sites = <'('> site (<'/'> site)* <')'>
<site> = #'[ACTYSKPNLMVIFDERHQWG]\d+' | symbol

(*
  Assays
*)
assay = activity_assay / locatedin / infraction / boundto / phos / generic_assay / binding
detect = <'['> symbol <']'>
assay_sym = symbol

activity_assay = activity <'('> substrates <')'> sites? detect
activity = ('IVKA' | 'IVLKA' | 'IVGefA' | 'IVPPaseAct' | 'IVHatAct' | 'IVProteaseAct' | 'IVHDACAct')
substrates = symbol (<#'[/,]'> symbol)*

locatedin = &'locatedin' assay_sym <'('> position <')'> detect
infraction = &'infraction' assay_sym <'('> fraction <')'> detect
boundto = &'boundto' assay_sym <'('> gene <')'> detect
position = symbol
fraction = symbol
gene = symbol

phos = phostype &'phos' assay_sym detect
phostype = 'ST' | #'[STY]'

generic_assay = assay_sym sites? detect

binding = assay_sym detect spaces hooks
hooks = <'('> hook (plus hook)* <')'> | hook (plus hook)*
hook = (hook_entity / oprotein) handle ip
hook_entity = symbol

(*
  Treatments
  treat_sym can be Antibody, Stress, or Chemical
*)
<treatment> = treat_sym / oprotein (handle ip)?
treat_sym = symbol
treatments = treatment (spaces conjunction spaces treatment)*

conjunction = 'and/or' | 'and' | 'or' | '+'

ktreatment = treatment ktest (spaces conjunction spaces treatment ktest)* |
             treatment (spaces conjunction spaces treatment)* ktest

ktest = spaces <'['> symbol <']'>

(*
  Environments and IPfrom contain the same data
*)
environment = <'cells:'> spaces? env_description
ipfrom = <#'IP[12s]?from'> <':'> spaces? env_description;

<env_description> = env_none / cells cell_mutations spaces <'in'> spaces medium strings?

cells = symbol
medium = symbol
env_none = 'none'

cell_mutations = cell_mutation*
cell_mutation = <'<'> (protein <'~'> mutation_type | oprotein) <'>'>
mutation_type = symbol

(*
  Source
*)
source = <'source:'> spaces? pmid <#'\([DR]\)'>? figures
pmid = nat
figures = (<'-'> ('Fig' | 'Table' | figs))*
<figs> = figure (<','> figure)*
<figure> = #'S?\d*[A-Za-z]?(\[[lrtbm]+\])?'

(*
  Times
*)
times = <'times:'> spaces? timepoints spaces unit
timepoints = timepoint (spaces timepoint)*
timepoint = num '+'*
unit = symbol

(*
  Extras
*)
extra = extra_adj? extra_name <' by:'> spaces extra_body |
        extra_adj? req_name <':'> spaces reqs_body

extra_adj = 'partially' spaces

extra_name = 'enhanced' |
             'inhibited' |
             'repressed' |
             'reversed' |
             'unaffected'

<extra_body> = (treatments spaces <'['> sub_mode <']'>) /
               (treatments (spaces stim_times)? spaces <'['> addition_mode <']'>) /
               ktreatment

addition_mode = 'addition' /
                'cotreatment' /
                'pretreatment' /
                'posttreatment'

stim_times = <'('> (numlist spaces unit | stim_times_excuse) <')'>
numlist = nat (spaces? <','> spaces? nat)*
stim_times_excuse = 'tnr'

sub_mode = 'substitution' /
           'knockin'

req_name = 'reqs' / 'does not req'
<reqs_body> = ktreatment |
              reqs_type spaces omission
reqs_type = 'both'
omission = <'['> #'omissions?' <']'>

(*
  Meta/comment information
*)
comment = <'comment:'> spaces? rest_of_line
(*
  Oligos have the following format, but are currently treated as comments

  oligo = <'oligo:'> spaces oligo_body
  <oligo_body> = oligo_str spaces? oligo_seq?
  oligo_str = string | symbol
  oligo_seq = #'5-[ATCG ]+-3' / symbol
*)
oligo = <'oligo:'> spaces? rest_of_line

(*
  Misc/helper nodes
*)

<string> = <'"'> #'[^"]*' <'"'>
strings = (spaces string)*
<symbol> = #'[\w\.\?!\\\-]+'
<rest_of_line> = #'[^\n]*'
<spaces> = <#' +'>
<plus> = spaces <'+'> spaces
nat = #'\d+'
num = #'\d+(\.\d+)?'
<letter> = #'[A-Za-z]'
<line_prefix> = <'  ***'> spaces
<newline> = spaces? <'\n'>
